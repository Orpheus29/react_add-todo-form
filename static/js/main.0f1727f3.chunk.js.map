{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["usersFromServer","id","name","username","email","todosFromServer","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","find","App","useState","todoItems","setTodoItems","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","userIds","newTodoItem","Math","max","prevState","htmlFor","type","placeholder","value","onChange","enteredTitle","preparedTitle","i","length","charCode","charCodeAt","checkTitleSpelling","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f1727f3.chunk.js","sourcesContent":["import { User } from '../types';\n\nconst usersFromServer: User[] = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n\nexport default usersFromServer;\n","import { TodoWithoutUser } from '../types';\n\nconst todosFromServer: TodoWithoutUser[] = [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n\nexport default todosFromServer;\n","import React from 'react';\nimport { User } from '../../types';\nimport './UserInfo.scss';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n  >\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoInfo.scss';\nimport { TodoWithUser } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed = false,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo', {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoWithUser } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoWithUser } from './types';\n\nconst checkTitleSpelling = (enteredTitle: string) => {\n  let preparedTitle = '';\n\n  for (let i = 0; i < enteredTitle.length; i += 1) {\n    const charCode = enteredTitle.charCodeAt(i);\n\n    if (charCode === 32\n      || charCode === 1100\n      || charCode === 1108\n      || charCode === 1110\n      || charCode === 1111\n      || (charCode > 47 && charCode < 58)\n      || (charCode > 64 && charCode < 91)\n      || (charCode > 96 && charCode < 123)\n      || (charCode > 1025 && charCode < 1066)\n      || (charCode > 1069 && charCode < 1098)\n      || (charCode > 1101 && charCode < 1105)\n    ) {\n      preparedTitle += enteredTitle[i];\n    }\n  }\n\n  return preparedTitle;\n};\n\nconst todos: TodoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(({ id }) => id === todo.userId) || null,\n}));\n\nexport const App: React.FC = () => {\n  const [todoItems, setTodoItems] = useState<TodoWithUser[]>(todos);\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(checkTitleSpelling(event.target.value));\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const clearForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title) {\n      setHasTitleError(true);\n    }\n\n    if (!userId) {\n      setHasUserIdError(true);\n    }\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const user = usersFromServer.find(({ id }) => id === userId) || null;\n    const userIds: number[] = todoItems.map(({ id }) => id);\n    const maxUserId = Math.max(...userIds);\n\n    const newTodoItem = {\n      id: maxUserId + 1,\n      title,\n      completed: false,\n      userId,\n      user,\n    };\n\n    setTodoItems(prevState => [...prevState, newTodoItem]);\n\n    clearForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label\n            htmlFor=\"todo-title\"\n          >\n            Title:&nbsp;&nbsp;\n\n            <input\n              id=\"todo-title\"\n              type=\"text\"\n              placeholder=\"Enter a title\"\n              data-cy=\"titleInput\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n          </label>\n\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label\n            htmlFor=\"todo-select\"\n          >\n            User:&nbsp;&nbsp;\n\n            <select\n              id=\"todo-select\"\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={handleUserIdChange}\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n\n              {usersFromServer.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todoItems} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}